name: Node.js CI
on: 
  push:
    branches: [ "master" ]
jobs:
  build:
   runs-on: self-hosted
   steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Install Node.js
      run: |
        curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
        sudo apt-get install -y nodejs
        node --version
        npm --version
 
  Installing_pm2_and_deploy_application:
   needs: [build]
   runs-on: self-hosted
   steps:
   - name: Checkout code
     uses: actions/checkout@v3
   - name: PM2 installation & Verify
     run: |
      sudo npm install -g pm2
      pm2 --version || true
   - name: Stop existing PM2 processes
     run: |
      cd /home/ubuntu/actions-runner/_work/Node_js_Application/Node_js_Application
      sudo pm2 delete all || true
   - name: Start application with PM2
     run: |
      cd /home/ubuntu/actions-runner/_work/Node_js_Application/Node_js_Application
      sudo pm2 start index.js --name "my-node-app"
   - name: Check application status
     run: |
      sudo pm2 status   
   - name: Install docker
     run: |
        sudo apt-get update -y
        sudo apt install docker.io -y
        sudo usermod -aG docker $USER
  
  Create_Docker_image:
   needs: [Installing_pm2_and_deploy_application]
   runs-on: self-hosted
   steps:
   - name: Checkout code
     uses: actions/checkout@v3
   - name: build image
     run: |
      sudo docker build /home/ubuntu/actions-runner/_work/Node_js_Application/Node_js_Application --tag my-node-app
   - name: check docker images
     run: |
      sudo docker images
  Pushing_Docker_image_in_jfrog:
   needs: Create_Docker_image
   runs-on: self-hosted
   steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Push Docker image
      run: |
        sudo docker login -u admin -p ${{ secrets.DOCKER_PASSWORD }} mskcc.jfrog.io
        sudo docker tag my-node-app:latest mskcc.jfrog.io/sandbox-docker-local/my-node-app:latest
        sudo docker push mskcc.jfrog.io/sandbox-docker-local/my-node-app:latest    
  Configure_AWS:
    needs: [Create_Docker_image]
    runs-on: self-hosted
    steps:
    - name: Configure AWS credentials
      run: |
        sudo apt install awscli -y
        aws --version
        aws configure set aws_access_key_id ${{secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region us-west-2 # Set your desired region
        
  Configure_ECS:
   needs: [Configure_AWS]
   runs-on: self-hosted
   steps:
    - name: Create ECS Cluster
      run: |
        aws ecs create-cluster --cluster-name my-node-student02   
    - name: Verify_Secret_in_AWS_Secret_Manager
      run: |
        existing_val=$(aws secretsmanager describe-secret --secret-id student02 --query 'Name' --output text 2>/dev/null || echo "")
        echo "jfrog_exists=$existing_val">> $GITHUB_ENV
    - name: Create Secret in AWS_Secret_Manager
      run: |
        if [ "${{ env.jfrog_exists }}" == "student02" ]; then
            echo "Secret already exists."
        else
            echo "Secret does not exist. Creating..."
        aws secretsmanager create-secret --name student02 --description "Username and Password of MyJfrog" --secret-string "${{ secrets.JFROG_CRED }}"    
        fi
    
    - name: Register Task_Definition
      run: |
        aws ecs register-task-definition --cli-input-json file://.github/workflows/task-definition.json
        aws ecs list-task-definitions
    - name: Fetch Revision number of Task_Definition
      run: |
        latest_revision=$(aws ecs describe-task-definition --task-definition node-app-deploy-student02 --query 'taskDefinition.revision')
        echo "Latest revision: $latest_revision"
    - name: Check if ECS service exists
      id: check-service
      run: |
        service_name="my-node-service-student02"
        existing_service=$(aws ecs describe-services --cluster my-node-student02 --services $service_name --query 'services[0].serviceName' --output text)
        echo "service_exists=$existing_service" >> $GITHUB_ENV
    - name: Create or update ECS service
      run: |
          if [[ "${{ env.service_exists }}" == "my-node-service-student02" ]]; then
            echo "Service already exists. Performing update..."
            latest_revision=$(aws ecs describe-task-definition --task-definition node-app-deploy-student02 --query 'taskDefinition.revision')
            echo "Latest revision: $latest_revision"
            aws ecs update-service --cluster my-node-student02 --service my-node-service-student02 --desired-count 1 --task-definition node-app-deploy-student02:$latest_revision
          else
            echo "Service does not exist. Creating a new service..."
            latest_revision=$(aws ecs describe-task-definition --task-definition node-app-deploy-student02 --query 'taskDefinition.revision')
            echo "Latest revision: $latest_revision"
            aws ecs create-service --cluster my-node-student02 --service-name my-node-service-student02 --task-definition node-app-deploy-student02:$latest_revision --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-0ab5a9b7768b9b147],securityGroups=[sg-014331ad55ed36e96],assignPublicIp=ENABLED}"
           fi        
        
    - name: Featch_Public_IP_Address
      run: |
        task_id=$(aws ecs list-tasks --cluster my-node-student02 --family node-app-deploy-student02 --query 'taskArns[0]' --output text | awk -F / '{print $NF}')
        echo $task_id
        task_arn=$(aws ecs describe-tasks --cluster my-node-student02 --tasks $task_id --query 'tasks[0].taskArn' --output text)
        echo $task_arn
        eni_number=$(aws ecs describe-tasks --cluster my-node-student02 --tasks $task_arn --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
        eni_id=$eni_number

        public_ip=$(aws ec2 describe-network-interfaces --network-interface-ids
        $eni_id --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        echo $public_ip        
        
